Board.txt

* 데이터베이스 관련
	- 계정, 디비 생성
	- 테이블 설계, 생성 (ERD)
	- 더미데이터 준비
	  https://www.mocharoo.com/
	  
* 스프링 MVC 관련
	- 패키지 구조 설계, 코드 규칙 작성
	- 개발 역할 분담
	- 테스트 동작, 기능구현
	
* 화면 관련
	- 화면방식 결정
	- 경로 설정(절대경로, 상대경로)
	
	

	
	
	* 게시판 동작
	동작				URI						방식		처리 후 페이지
	글쓰기(정보입력)	/board/register			GET			글쓰기.jsp (view 연결)
	글쓰기(처리)		/board/register			POST		리스트 페이지(컨트롤러)
	글 리스트 보기		/board/list				GET			리스트.jsp (view 연결)
	글 본문보기			/board/read?bno=xx		GET			본문.jsp (view 연결)		
	글 수정하기			/board/modify/bno=x		GET			수정.jsp (view 연결)
	글 수정하기(처리)	/board/modify			POST		리스트페이지/본문페이지(컨트롤러)
	글 삭제하기			/board/remove			POST		리스트페이지(컨트롤러)
	
	
	
	
	* 페이징 처리
	1) 사용자에게 필요한 만큼의 데이터를 전송
	2) 빠른 데이터 처리와 데이터 표현
	
	- 한페이지에 몇개씩 보여주는가?
	- 페이지 블럭 링크를 통한 페이지 이동
	- 조회/수정/삭제 후 리스트로 이동
	
	* <a>태그 - href, 이동할 주소를 직접 지정
	  => 검색엔진에 노출이 쉽다.
	     href 속성을 파싱(한번에 필요한 정보를 얻을수 있다)
	     페이징 처리 소스코드의 양이 많음. 
	  
	* <form>태그 , 이동정보를 받아서 이동
	 => 최소한의 데이터만 가지고 이동
	    빠른 페이징 처리 (JS)
	    페이징 처리 소스코드 양이 적음.
	    
	    
	* 페이징처리 규칙
	1) 페이징처리는 항상 GET방식
	2) 글 조회 동작에는 반드시 목록으로 이동하는 동작이 있어야함
	3) 글 조회,수정,삭제 모두 처리후 목록으로 이동 (원래 페이지 유지) 
	4) 페이지 수에 따른 페이지번호를 출력(화면 아래)
	    
	

	* 하단 페이징 처리
	 - 시작페이지 번호(startNum) : 페이지 시작정보, '이전' 버튼
	   [ startPage = (endPage - displayPageNum) + 1 ]
	 - 끝 페이지 번호(endPage) : 총 페이지 수, '다음' 버튼
	   [endPage = (int)(Math.ceil(cri.getPage() / (double)displayPageNum )) * displayPageNum]
	 - 전체 데이터 개수 (totalCount)
	   [ int tmpEndPage = (int)(Math.cell(totalCount/(double) cri.getPerPageNum) ]
	   [ if(endPage tmpEndPage ) endpage = tmpEndPage ]
	 - 이전 페이지 (prev)
	   [ prev = (startPage == 1) ? false : true ]
	 - 다음 페이지 (next) 
	   [ next = endPage * cri.getPerPageNum() >= totalCount ? false : true ]
	 
	 ex) 한 번에 10개식 출력 페이지, 총 글의 개수 126개
	 





	